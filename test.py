from blackjack21 import Table, Dealer
import random
from model import Model
import heapq
import numpy as np
import multiprocessing

layers = [15,8,8,2]
bias = [6,5,3]
start = [[[1.101236446683401, 0.47521836308187304, 0.49943856000251996, 0.6070205420617176, 0.14612316471991474, 0.4366103733667088, 0.15687770283839614, 0.6922378911678493], [0.7328981033954439, 0.5188023361942431, 0.1743321795077353, 1.0063777833015048, 0.7561692488688639, 0.93579230778767, 0.4933339948329801, 0.11826627850196642], [0.6175736507480332, 0.40995266692945986, 0.8542033408833458, 0.7090425454554201, 0.3704910588583052, 0.4669718321737074, 0.710106871686639, 0.3082980831893246], [0.5925757538873668, 0.32850876782668326, 0.4974493088789594, 0.5277713579861719, 0.8225948753078861, 0.4607107039843237, 0.24492374152379717, 0.04726494097573215], [0.08581621389560379, 0.6867346240165326, 0.7567868183971987, 0.876708398135328, 0.7184024719596978, 0.49639954094023064, 0.41706412290235934, 0.1482558468619748], [0.8571678095832135, 0.03699861197734932, 0.3979462352102509, 0.7693462850837645, 0.0452211641889323, 0.575945612420249, 0.6627979523245892, 0.5717141617352333], [0.7799633708146264, 0.25085634539224616, 0.4314296845277461, 0.1850609563624693, 0.08692557980410438, 0.2903254561151607, 0.4936591037564411, 0.7209706489778737], [0.4445672558399189, 0.6123547399362007, 0.5771564326786798, 0.3019994759493918, 0.6314329634525294, 0.3590849394704186, 0.6867547791991074, 0.38537576002663687], [0.9096482990454926, 0.308026453283093, 0.4871523515640843, 0.252887361911443, 0.5911149583974802, 0.38817912455373943, 0.8281047104674452, 0.030676796452755204], [0.151837831987956, 0.993045474151782, 0.39608925073995954, 0.10760737292490183, 0.20382619288469164, 0.7380680164736266, 0.37579061754984444, 0.5238616614817013], [0.3129836858783187, 0.05637803694621977, 0.5024953101846489, 0.9257074373267548, 0.21088543390379869, 0.4977017037378942, 0.405594937016014, 0.06079562667460237], [0.5362774490214485, 0.8590915500003631, 0.18363708460693365, 0.1819611630447013, 0.28381985640181523, 0.833017305337534, 0.8403941321808857, 0.3103642780335294], [0.7144477004131063, 0.11068623117982994, 0.3193058155196194, 0.2958512722503845, 0.40740847344180564, 0.6087878943388789, 0.4965439963213331, 0.5961440909375784], [0.8063798972179845, 0.6501317159151904, 0.7158315942688909, 0.829154269068574, 0.9786555763915079, 0.19990711859067364, 0.1594908946389253, 0.8120477259829904], [0.4675701035854606, 0.6161147859638583, 0.8798572925554641, 0.8092150491644852, 0.2631940080367167, 0.22588119704313336, 0.6451865982584418, 0.5801453063543781]], [[0.14029293157869022, 0.934391692359088, 0.9609195589022159, 0.8391486555917729, 0.44447905453674763, 0.787103713993958, 0.22106828751294913, 0.04622754931346416], [0.4124957910591146, 0.8416684268595328, 0.22983251073852012, 0.4177786640981604, -0.002355172878658807, 0.829888718531683, 0.8029860391499998, 0.2839559914517428], [0.2262222893471589, 0.7393860078666373, 0.12583966388686832, 0.8365611548742625, 0.3951195805630056, 0.7825634577183742, 0.495942073459774, 0.7069672482004028], [0.239206974960531, 0.7330484923952502, 0.4951941857004157, 0.30435715982743455, 0.47802313712785005, 0.8482782854024471, 0.4108612880247904, 0.0015413960016794671], [0.8718663595397617, 0.4621937361084056, 0.5924141728960359, 0.4720982751668672, 0.9318243984662915, 0.48440683686484537, 0.7641623913573209, 0.6678997788027118], [0.11869483684828529, 0.8215806127386207, 0.5797474936723848, 0.4809736898721796, 0.43987525259289223, 0.538099757307388, 0.859102504857297, 0.6913946054580697], [0.1063856200635123, 0.09571621624645157, 0.3650365913102317, 0.6386088096217065, 0.2703905434884914, 0.02644458151459028, 0.3606746145832591, 0.9470509776722855], [0.740873924518872, 0.6055352539039589, 0.4579658159556424, 0.22656599574456054, 0.30324727298391424, 0.25940009636970607, 0.20264424146610055, 0.8952092111992394]], [[0.1709292316589946, 0.18813677291026853], [0.42003161027983665, 0.3520735060782112], [0.9026524686403318, 0.5820353482557447], [0.08309529181428804, 0.05914957522279678], [0.4466883868215993, 0.5673898286878166], [0.07042233671150375, 0.11605075196207414], [0.5276570667638983, 0.6542049967560225], [0.4916069503872691, 0.7744565857173057]]]

def print_cards(player):
    print(f"\n{player.name}")
    for i, card in enumerate(player.hand):
        if (type(player) != Dealer) or (type(player) == Dealer and i == 0):
            print(f"{card.rank} of {card.suit}")
    if type(player) != Dealer:
        print(player.total)

def show_result(table):
    print(f"\nDealer has {table.dealer.total}")
    for player in table:
        result = player.result
        if result > 0:
            print(f"{player.name} wins ${player.bet} ({player.total})")
        elif result == 0:
            print(f"Hand tied ({player.total})")
        else:
            print(f"{player.name} loses ${player.bet} ({player.total})")

def play_round(table, player, model):
    print_cards(table.dealer)
    print_cards(player)
    while not (player.bust or player.stand):
        for i in range(len(player.hand)):
            model.vals[i+1] = player.hand[i].value

        action = model.compute()

        if action == 0:
            player.play_hit()
            print_cards(player)

        elif action == 1:
            player.play_stand()


def main():
    net_gain = 0

    for i in range(15):
        a = ("AI", 1)
        players = (a, )

        table = Table(players)

        dealer_first_card = table.dealer.hand[0]
        print(f"Dealer: {dealer_first_card.rank} of {dealer_first_card.suit} and ?")

        vals = [dealer_first_card.value, table.players[0].hand[0].value, table.players[0].hand[1].value, 0,0,0,0,0,0,0,0,0,0,0,0]

        model = Model(start, vals, bias)

        for player in table:
            r = play_round(table, player, model)

        table.dealer.play_dealer()

        print("\nDealer")
        for card in table.dealer.hand:
            print(f"{card.rank} of {card.suit}")
        show_result(table)

        if table.players[0].result > 0:
            net_gain += 1
        elif table.players[0].result < 0:
            net_gain -= 1
        print("\n\n")
    print(f"net gain = {net_gain}")

if __name__ == "__main__":
    main()




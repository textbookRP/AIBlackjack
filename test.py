from blackjack21 import Table, Dealer
import random
from model import Model
import heapq
import numpy as np
import multiprocessing

layers = [15,8,8,2]
bias = [10, 5, 2]

def print_cards(player):
    print(f"\n{player.name}")
    for i, card in enumerate(player.hand):
        if (type(player) != Dealer) or (type(player) == Dealer and i == 0):
            print(f"{card.rank} of {card.suit}")
    if type(player) != Dealer:
        print(player.total)

def show_result(table):
    print(f"\nDealer has {table.dealer.total}")
    for player in table:
        result = player.result
        if result > 0:
            print(f"{player.name} wins ${player.bet} ({player.total})")
        elif result == 0:
            print(f"Hand tied ({player.total})")
        else:
            print(f"{player.name} loses ${player.bet} ({player.total})")

def play_round(table, player, model):
    print_cards(table.dealer)
    print_cards(player)
    while not (player.bust or player.stand):
        for i in range(len(player.hand)):
            model.vals[i+1] = player.hand[i].value

        action = model.compute()

        if action == 0:
            player.play_hit()
            print_cards(player)

        elif action == 1:
            player.play_stand()


def main():
    start = [[[0.5015406514995581, 0.06902962687229575, 0.8059024746473916, 0.1757460933444317, 0.42014266111672743, 0.7529229899358497, 0.579394843893081, 0.6358954843404557], [0.2536203026775646, 0.7307791174033283, 0.8384894431042609, 0.5046897920132188, 0.51562383367669, 0.5596475571721579, 0.9228045876725159, 0.8909902949576659], [0.8477533111810991, 0.6998285116905318, 0.8191865849653234, 0.5973576050843269, 0.6267452583869345, 0.1361932300067419, 0.8782186843717111, 0.9852064002442928], [0.5964325778367171, 0.23585036773629028, 0.36005728983454066, 0.20569997386718705, 0.1673001526005125, 0.8058035786849445, 0.4331524951718625, 0.8078592532721471], [0.9589129546098364, 0.846091653407682, 0.1746438534018795, 0.2905222905037814, 0.23618109555108815, 0.6108716289867858, 0.196372273951345, 0.8868557074304299], [0.8677633901675015, 0.6499124511646498, 0.7079375037733572, 0.05109539287636984, 0.6573868689393735, 0.7258051470613024, 0.19125883187214598, 0.02836693994480041], [0.7479906330318853, 0.5712550766074441, 0.5768105221196959, 0.6409787058941819, 0.3909562104523741, 0.35793667083986186, 0.20678472958134414, 0.10193981752273244], [1.0063695572459546, 1.0106806091403069, 0.5708437711408304, 0.823793445602229, 0.511196331227237, 0.5167850820013158, 0.45025163888500463, 0.1691596003462635], [0.4594533306669904, 0.3394208933501688, 0.7501195004917595, 0.4300315234203195, 0.3698282738532529, 0.8777372413615223, 0.8810627395772074, 1.015821815030596], [0.602371815916348, 0.17393124806876525, 0.8618343316020765, 0.8459905722148424, 0.7298344334467349, 0.6006145510701234, 0.13489428611862567, 0.6038458906529816], [0.9759585150424811, 0.49017388106743304, 0.36404728989628465, 0.5974683764950559, 0.279786632763164, 0.5298999345345012, 0.5798836922021001, 0.05373872635160081], [0.10175571262508686, 0.7993228555693763, 0.21051103372665317, 0.6392935405903508, 0.16565972982249227, 0.9096195380577606, 0.5348753075866218, 0.044898077849551306], [0.5873226481373087, 0.05642219365178006, 0.9467548554463652, 0.2691797304675097, 0.19878998220315341, 0.053420461449127, 0.9547045767236129, 0.5708554435915202], [0.9482879773126118, 0.20309490058650329, 0.6800234163946789, 0.9330545552371492, 0.23268510911007537, 0.8373313783319665, 0.4216918014219341, 0.6608432062058774], [0.8281368935177607, 0.3336917608274491, 0.4087082631653685, 0.024388285136552244, 0.4399445137195347, 0.4942197154473868, 0.9233740637084589, 0.014800323759826808]], [[0.8448275616610942, 0.6539328583860474, 0.028461081586977945, 0.7801036558448539, 0.5669289932787435, 0.6539323181181316, 0.4604159586062784, 0.38559944879824776], [0.24713688244652574, 0.9716019909543503, 0.42081944789637177, 0.06863452724811268, 0.8573669145250002, 0.1811601524504093, 0.29462570656297227, 0.544875099758405], [0.0148605841963679, 0.29291553983160035, 0.7440481755072763, 0.3827665134225229, 0.05966103008249332, 0.8082949357263158, 0.6547472013436013, 0.880707407354059], [0.7169678655800182, 0.7287299141262151, 0.9712700008959143, 1.0002050679336767, 0.047406753406389945, 0.9880901117358991, 0.15898775932768355, 0.5050835791375595], [0.8008879453258302, 0.41315315918919393, 0.8078168599492093, 0.058620130868949384, 0.4785169924587784, 0.7752779159284474, 0.6815625778703306, 0.4316876266099889], [0.1614413188121064, 0.7902346143019399, 0.8103129691733821, 0.030019766115362497, 0.591083062579501, 0.636915553206269, 0.29631499802665134, 0.2651087646302337], [0.612765617324106, 0.29091212033285524, 0.8820364499481645, 0.4454260500093877, 0.8255713225882715, 0.9170033777378955, 0.7568177192544241, 0.3698859308345988], [0.8504466427464703, 0.8015695756159584, 0.23604166861290068, 0.7100157422732596, 0.2963103141103125, 0.8962217388981155, 0.7292321778703884, 0.9781642346342343]], [[0.5991025126537985, 0.9103754995809346], [0.08917633817455696, 0.3332308076911472], [0.7993195062461802, 0.5788144759728044], [0.9635201256379816, 0.3864447957987909], [0.6101055510755397, 0.5979152198831041], [0.6842171166551627, 0.590440571078763], [0.0983838418889922, 0.7922239503737248], [0.9014329363951438, 0.513889412072902]]]

    net_gain = 0

    for i in range(15):
        a = ("AI", 1)
        players = (a, )

        table = Table(players)

        dealer_first_card = table.dealer.hand[0]
        print(f"Dealer: {dealer_first_card.rank} of {dealer_first_card.suit} and ?")

        vals = [dealer_first_card.value, table.players[0].hand[0].value, table.players[0].hand[1].value, 0,0,0,0,0,0,0,0,0,0,0,0]

        model = Model(start, vals, bias)

        for player in table:
            r = play_round(table, player, model)

        table.dealer.play_dealer()

        print("\nDealer")
        for card in table.dealer.hand:
            print(f"{card.rank} of {card.suit}")
        show_result(table)

        if table.players[0].result > 0:
            net_gain += 1
        elif table.players[0].result < 0:
            net_gain -= 1
        print("\n\n")
    print(f"net gain = {net_gain}")

    


if __name__ == "__main__":
    main()



